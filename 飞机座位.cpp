//您的任务是为四口之家尽可能多的分配座位。
// 一个四口之家必须占领一排当中连续的四个座位
// 。过道上的座位（例如2C和2D）不被认为是彼此相邻的。
// 一家人被过道分开是可以的，但在这种情况下必须每一边坐两个。
//
//函数中N表示有N排座位，S表示已经提供出去的座位，
// 函数返回剩下的座位能坐四口之家的最大值。
// 例如， N = 2，S = '1A 2F 1C’,你的函数应该返回2.下图给出了做法。
//
//当N = 1, S = ""(空字符串)，你的函数应该返回2，
// 因为我们最多可以提供2个四口之家的座位在一排空座位中，例如下图。
//
//N是在[1, 50]内的整数；
//字符串S由有效的座位名称组成，并用单个空格分隔；
//每个座位号最多在字符串S中出现一次。
//样例
//输入 :
//N = 2，S = "1A 2F 1C"
//输出 :
//	2
//	输入 :
//	N = 1，S = ""
//	输出 :
//	2

#include<stdio.h>
#include<string.h>
#define line 10
#define N 2
int main()
{
	char S[100] = { 0 };
	gets_s(S);
	int t = 0;
	int a[N+1][line] = { NULL };
	for (int i = 0; i < sizeof(S); i++) 
	{
		if (S[i] == ' ')continue;
		else if (S[i] >= '0' && S[i] <= '9')
			t = t * 10 + S[i] - '0';//跳转到下一行
		else 
		{
			a[t][S[i] - 'A'] = 1;//将空格以外的命名为1
			t = 0;
		}
	}
	int i = 0, j = 0;
	int ret = 0;
	for (i = 1; i <= N; i++) {
		if (a[i][1] + a[i][2] + a[i][3] + a[i][4] == 0)
		{
			a[i][1] = a[i][2] = a[i][3] = a[i][4] = 1;
			ret++;
		}
		if (a[i][3] + a[i][4] + a[i][5] + a[i][6] == 0)
		{
			a[i][3] = a[i][4] = a[i][5] = a[i][6] = 1;
			ret++;
		}
		if (a[i][5] + a[i][6] + a[i][7] + a[i][8] == 0) 
		{
			a[i][5] = a[i][6] = a[i][7] = a[i][8] = 1;
			ret++;
		}
	}
	printf("%d\n", ret);
	
	return 0;
}